{
    "collab_server" : "",
    "contents" : "#intronseq=\"GTAAGATCAGTAGTTGTGCATCTGTGCTGGGCACCTGTGCATCTCCAGCTTAAAAAGTCTATCAGGTGGAGGTGATTTTTTTCTAACTCATCATATAGTGCATTCATTTTCGAGCTTCTTACTTCAGTAGGAGGATGCTA\"\n#X=c()\n#k=1\n#for (i in 70:140){\n#  x=substr(intronseq,1,i)\n#  X=c(X,x)\n#}\n\n#f=DNAStringSet(X)\n\n#system(\"RNAfold -i ~/Desktop/Mirtrony/lal.fasta -o lol\")\n\nlibrary(\"S4Vectors\")\nlibrary(\"stats4\")\nlibrary(\"IRanges\")\nlibrary(\"XVector\")\nlibrary(\"Biostrings\")\nlibrary(\"stringr\")\nlibrary(\"RRNA\")\nlibrary(\"ggplot2\")\nsetwd(\"/home/ror/Desktop/Mirtrony\")\nrm(list=ls())\nsource(\"overhangcount.R\")\nsource(\"mirna_features.R\")\nsource(\"intron_features.R\")\nsource('DataAnalysis_BK.R')\n\n\nclass=\"5p\" #tailed\narm=\"3p\"\nwindow=25\nmirratio=0.6\nprobe_length=170\n\n#MIRTRONS\nmirtron_data=read.csv(\"./Data/mirtrondata.csv\", header=TRUE, stringsAsFactors = FALSE)\nmirna_input1=data.frame(hairpin_seq=mirtron_data$hairpin_seq, db=mirtron_data$dotbracket, fe=mirtron_data$fe, \n                        mature5p_seq=mirtron_data$mature5p_seq, mature3p_seq=mirtron_data$mature3p_seq, stringsAsFactors = FALSE)\n\n\n#INTRONS CODING MIRNA\nintron_data=read.csv(\"./Data/introns.csv\", header=TRUE, stringsAsFactors = FALSE)\nintron_input1=data.frame(intron_seq=intron_data$intron_seq, class=mirtron_data$class, stringsAsFactors = FALSE)\nintron_input1$intron_seq=chartr(\"T\",\"U\",intron_input1$intron_seq)\n\n\n#INTRONS NOT CODING MIRNA\nintron_data2=read.csv(\"./Data/all_other_introns.csv\", header=TRUE, stringsAsFactors = FALSE)\nintron_input2=data.frame(hairpin_seq=intron_data2$intron_seq, stringsAsFactors = FALSE)\n\nmirna_input1=cbind(mirna_input1,intron_input1)\n\n\nfor (i in 1:dim(mirna_input1)[1]){\n  class=mirna_input1$class[i]\n  if (class==\"3p\"){\n    mirna_input1$intronprobe[i]=substr(mirna_input1$intron_seq[i],1,probe_length)\n    \n  } else if (class==\"5p\"){\n    mirna_input1$intronprobe[i]=substr(mirna_input1$intron_seq[i],nchar(mirna_input1$intron_seq[i])-probe_length,nchar(mirna_input1$intron_seq[i]))\n  } else {\n    mirna_input1$intronprobe[i]=mirna_input1$intron_seq[i]\n  }\n  loc5p=str_locate(mirna_input1$intronprobe[i],mirna_input1$mature5p_seq[i])\n  loc3p=str_locate(mirna_input1$intronprobe[i],mirna_input1$mature3p_seq[i])\n  x=as.character(rep(0,nchar(mirna_input1$hairpin_seq[i])))\n  x=replace(x,loc5p[1]:loc5p[2],1)\n  x=replace(x,loc3p[1]:loc3p[2],2)\n  x=replace(x,(loc5p[2]+1):(loc3p[1]-1),3)\n  x=paste(x,collapse=\"\")\n  mirna_input1$numerical[i]=x\n  \n}\n\nintron_5p=mirna_input1[c(which(intron_input1$class==\"5p\")),]\nintron_3p=mirna_input1[c(which(intron_input1$class==\"3p\")),]\nintron_mirtron=mirna_input1[c(which(intron_input1$class==\"mirtron\")),]\n\n#mirna_5p=mirna_input1[c(which(mirtron_data$class==\"5p\")),]\n#mirna_3p=mirna_input1[c(which(mirtron_data$class==\"3p\")),]\n#mirna_mirtron=mirna_input1[c(which(mirtron_data$class==\"mirtron\")),]\n\n#Positions of mature mirnas within introns\n#pos_5ptailed=data.frame(intron_length=nchar(intron_5p$hairpin_seq),\n#                intron5p5parm=str_locate(intron_5p$hairpin_seq, mirna_5p$mature5p_seq),\n#               intron5p3parm=str_locate(intron_5p$hairpin_seq, mirna_5p$mature3p_seq))\n#pos_5ptailed$arm5p.start=pos_5ptailed$intron5p5parm.start*100/pos_5ptailed$intron_length\n#pos_5ptailed$arm5p.end=pos_5ptailed$intron5p5parm.end*100/pos_5ptailed$intron_length\n#pos_5ptailed$arm3p.start=pos_5ptailed$intron5p3parm.start*100/pos_5ptailed$intron_length\n#pos_5ptailed$arm3p.end=pos_5ptailed$intron5p3parm.end*100/pos_5ptailed$intron_length#\n#\n#pos_3ptailed=data.frame(intron_length=nchar(intron_3p$hairpin_seq),\n#               intron3p5parm=str_locate(intron_3p$hairpin_seq, mirna_3p$mature5p_seq),\n#               intron3p3parm=str_locate(intron_3p$hairpin_seq, mirna_3p$mature3p_seq))\n#pos_3ptailed$arm5p.start=pos_3ptailed$intron3p5parm.start*100/pos_3ptailed$intron_length\n#pos_3ptailed$arm5p.end=pos_3ptailed$intron3p5parm.end*100/pos_3ptailed$intron_length\n#pos_3ptailed$arm3p.start=pos_3ptailed$intron3p3parm.start*100/pos_3ptailed$intron_length\n#pos_3ptailed$arm3p.end=pos_3ptailed$intron3p3parm.end*100/pos_3ptailed$intron_length\nx=intron_5p\n\nfor (k in 1:dim(x)[1]){\n  intronseq1=data.frame(matrix(,nrow=nchar(x[k])-window,ncol=3))\n  colnames(intronseq1)=c(\"mature\",\"position\",\"type\")\n  for (i in 0:(nchar(x[k])-window)){\n    intronseq1[i+1,1]=substring(x[k],i+1,window+i)\n    intronseq1[i+1,3]=0\n    if (arm==\"3p\"){\n      intronseq1[i+1,2]=nchar(x[k])-window-i\n    } else {\n      intronseq1[i+1,2]=i+1\n    }\n    \n  }\n  intronseq=rbind(intronseq,intronseq1)\n  \n}\n\n\n\n\n",
    "created" : 1488973975911.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2984766522",
    "id" : "9C988B08",
    "lastKnownWriteTime" : 1489083422,
    "last_content_update" : 1489083422237,
    "path" : "~/Desktop/Mirtrony/intron_test.R",
    "project_path" : "intron_test.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}