{
    "collab_server" : "",
    "contents" : "library(\"S4Vectors\")\nlibrary(\"stats4\")\nlibrary(\"IRanges\")\nlibrary(\"XVector\")\nlibrary(\"Biostrings\")\nlibrary(\"stringr\")\nlibrary(\"RRNA\")\nlibrary(\"ggplot2\")\nsetwd(\"/home/ror/Desktop/Mirtrony\")\nrm(list=ls())\nsource(\"overhangcount.R\")\nsource(\"mirna_features.R\")\nsource(\"intron_features.R\")\nsource('DataAnalysis_BK.R')\n\n\nstartn=1\nendn=224 # change it to find class=0 or 1\nclass=\"5p\" #tailed\narm=\"3p\"\nwindow=25\nmirratio=0.6\nhairpin_length=120\n\nmirtron_data=read.csv(\"./Data/mirtrondata.csv\", header=TRUE, stringsAsFactors = FALSE)\nmirna_input1=data.frame(hairpin_seq=mirtron_data$hairpin_seq, db=mirtron_data$dotbracket, fe=mirtron_data$fe, \n                        mature5p_seq=mirtron_data$mature5p_seq, mature3p_seq=mirtron_data$mature3p_seq, stringsAsFactors = FALSE)\nmirna_5p=mirna_input1[c(which(mirtron_data$class==\"5p\")),]\nmirna_3p=mirna_input1[c(which(mirtron_data$class==\"3p\")),]\nmirna_mirtron=mirna_input1[c(which(mirtron_data$class==\"mirtron\")),]\n#mirtron_mirna=mirna_features(mirna_input1, random=FALSE) #cal, mirna features\n#mirtron_mirna$class=1 #1 is for mirtron\n#mirtron_mirna$type=mirtron_data$class\n\n#introns=introns(mirtron_data)\nintron_data=read.csv(\"./Data/introns.csv\", header=TRUE, stringsAsFactors = FALSE)\nintron_input1=data.frame(hairpin_seq=intron_data$intron_seq, \n                        intron5p_seq=intron_data$intron_seq, intron3p_seq=intron_data$intron_seq, stringsAsFactors = FALSE)\nintron_5p=intron_input1[c(which(mirtron_data$class==\"5p\")),]\nintron_3p=intron_input1[c(which(mirtron_data$class==\"3p\")),]\nintron_mirtron=intron_input1[c(which(mirtron_data$class==\"mirtron\")),]\n\n#source(\"otherintrons.R\")\nintron_data2=read.csv(\"./Data/all_other_introns.csv\", header=TRUE, stringsAsFactors = FALSE)\nintron_input2=data.frame(hairpin_seq=intron_data2$intron_seq, \n                         intron5p_seq=intron_data2$intron_seq, intron3p_seq=intron_data2$intron_seq, stringsAsFactors = FALSE)\n#intron_intron$class=0\n\n#intron=intron_input1[startn:endn,]\n#mirtron_data_i=mirtron_data[startn:endn,]\n#mirtron_mirna_i=mirtron_mirna[startn:endn,]\nintron$intron5p_seq=chartr(\"T\",\"U\",intron$intron5p_seq)\nintron$intron3p_seq=chartr(\"T\",\"U\",intron$intron3p_seq)\n\n\nif (class==\"3p\"){\n  hairpin=data.frame(hairpin=intron$intron5p_seq[which(mirtron_data_i$class==\"3p\")])\n  mirtron1=data.frame(mirtron_data_i[which(mirtron_data_i$class==\"3p\"),])\n  mirtron2=data.frame(mirtron_mirna_i[which(mirtron_data_i$class==\"3p\"),])\n  \n  } else if (class==\"5p\"){\n    hairpin=data.frame(hairpin=intron$intron3p_seq[which(mirtron_data_i$class==\"5p\")])\n    mirtron1=data.frame(mirtron_data_i[which(mirtron_data_i$class==\"5p\"),])\n    mirtron2=data.frame(mirtron_mirna_i[which(mirtron_data_i$class==\"5p\"),])\n    \n  } else{\n    hairpin=data.frame(hairpin=intron$intron3p_seq[which(mirtron_data_i$class==\"mirtron\")])\n    mirtron1=data.frame(mirtron_data_i[which(mirtron_data_i$class==\"mirtron\"),])\n    mirtron2=data.frame(mirtron_mirna_i[which(mirtron_data_i$class==\"mirtron\"),])\n}\nif (arm==\"3p\"){\n  x=substr(hairpin$hairpin,ceiling(nchar(as.character(hairpin$hairpin))/3)+1,nchar(as.character(hairpin$hairpin)))\n  mature=data.frame(mature=mirtron1$mature3p_seq)\n  position=data.frame(position=mirtron2$mature3pposition)\n} else{\n  x=substr(hairpin$hairpin,1,ceiling(nchar(as.character(hairpin$hairpin))*2/3))\n  mature=data.frame(mature=mirtron1$mature5p_seq)\n  position=data.frame(position=mirtron2$mature5pposition)\n}\n\nintronseq=matrix(,nrow=1,ncol=3)\ncolnames(intronseq)=c(\"mature\",\"position\",\"type\")\nknown=data.frame(mature=mature,position=position,class=class,arm=arm,type=1)\n\nfor (k in 1:dim(hairpin)[1]){\n  intronseq1=data.frame(matrix(,nrow=nchar(x[k])-window,ncol=3))\n  colnames(intronseq1)=c(\"mature\",\"position\",\"type\")\n  for (i in 0:(nchar(x[k])-window)){\n    intronseq1[i+1,1]=substring(x[k],i+1,window+i)\n    intronseq1[i+1,3]=0\n    if (arm==\"3p\"){\n      intronseq1[i+1,2]=nchar(x[k])-window-i\n    } else {\n      intronseq1[i+1,2]=i+1\n    }\n   \n  }\n  intronseq=rbind(intronseq,intronseq1)\n  \n}\nknown=known[,c(-3,-4)]\nknown$mature=as.character(known$mature)\nintronseq=intronseq[-1,]\nintronseq$mature=as.character(intronseq$mature)\nC=c()\nfor (i in 1:dim(known)[1]){\n  z=known$mature[i]\n  mirwindow=ceiling(nchar(z)*mirratio)\n  k=1\n  while (k+mirwindow<=nchar(z)){\n    c=which(!is.na(str_locate(intronseq$mature,substring(z,k,k+mirwindow)))[,1])\n    C=c(c,C)\n    k=k+1\n  }\n  \n}\nif (!is.null(C)){\n  #intronseq=intronseq[-C,]\n}\n\n  \n\ninput=rbind(intronseq,known)\ninput$mature=as.character(input$mature)\nresults=data.frame(position=as.numeric(input$position))\nresults$mature_length=nchar(input$mature)\nresults$mature_A=str_count(input$mature,\"A\")*100/nchar(input$mature)\nresults$mature_C=str_count(input$mature,\"C\")*100/nchar(input$mature)\nresults$mature_G=str_count(input$mature,\"G\")*100/nchar(input$mature)\nresults$mature_U=str_count(input$mature,\"U\")*100/nchar(input$mature)\nresults$seq=input$mature\nresults$class=input$type\nresults$class[C]=1########\n\npcdata5=results\npcdata5=pcdata5[,c(-2,-7,-8)]\npca5=prcomp(pcdata5, retx=TRUE, center=TRUE, scale=TRUE)\nrow.names(pca5$x)=1:dim(pcdata5)[1]\n\nlabels=factor(c(rep('introns',dim(intronseq)[1]),rep('mirtrons',dim(pcdata5)[1]-dim(intronseq)[1])),levels=c('introns','mirtrons'))\ngg2_pca5<-BK_gg2_biplot(pca5,gr.shape = labels, gr.colour =labels, size=2, attr_text_size=6,\n                       limits = list(x=c(-5,5),y=c(-5,5)))\n\ntitle=paste(paste(paste(class, \"tailed\",sep=\"-\"),arm,sep=\", \"), \"arm\")\n  \nplot(gg2_pca5, main=title)\n\n",
    "created" : 1489065525103.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4038814652",
    "id" : "8DEAB02D",
    "lastKnownWriteTime" : 1488989864,
    "last_content_update" : 1488989864,
    "path" : "~/Desktop/Mirtrony/intron_analysis.R",
    "project_path" : "intron_analysis.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}