{
    "collab_server" : "",
    "contents" : "\n#ml_data=rbind(mirtron_mirna,canonical_mirna)\nlibrary(\"randomForest\")\nlibrary(MASS)\n\ntype=\"intron\" #/blank for mirna\n\nif (type==\"intron\"){\n  source(\"intron_analysis.R\")\n  known_size=dim(known)[1]\n  intronseq_size=dim(intronseq)[1]\n  learning_data=rbind(results[1:ceiling(intronseq_size/2),],results[(intronseq_size+1):(intronseq_size+100),])\n  testing_data=rbind(results[(ceiling(intronseq_size/2)+1):intronseq_size,]\n                     ,results[(intronseq_size+101):dim(results)[1],])\n  check=testing_data$class\n  testing_data=testing_data[,c(-2,-7,-8)]\n  learning_data=learning_data[,c(-2,-7)]\n} else {\n  #learning_data=rbind(mirtron_mirna,canonical_mirna[1:(dim(canonical_mirna)[1]-100),])\n  #testing_data=rbind(test_mirna,canonical_mirna[(dim(canonical_mirna)[1]-99):dim(canonical_mirna)[1],])\n  #learning_data=rbind(mirtron_mirna[1:112,],canonical_mirna[1:111,])\n  #testing_data=rbind(mirtron_mirna[113:224,],canonical_mirna[112:222,])\n  \n  #X=BK_sample_crossVal(dim(Z)[1],5)\n  \n  mir_fifth=floor(dim(mirtron_mirna)[1]/5)\n  can_fifth=floor(dim(canonical_mirna)[1]/5)\n  ds1=rbind(mirtron_mirna[(0*mir_fifth+1):(1*mir_fifth),],canonical_mirna[(0*can_fifth+1):(1*can_fifth),])\n  ds2=rbind(mirtron_mirna[(1*mir_fifth+1):(2*mir_fifth),],canonical_mirna[(1*can_fifth+1):(2*can_fifth),])\n  ds3=rbind(mirtron_mirna[(2*mir_fifth+1):(3*mir_fifth),],canonical_mirna[(2*can_fifth+1):(3*can_fifth),])\n  ds4=rbind(mirtron_mirna[(3*mir_fifth+1):(4*mir_fifth),],canonical_mirna[(3*can_fifth+1):(4*can_fifth),])\n  ds5=rbind(mirtron_mirna[(4*mir_fifth+1):dim(mirtron_mirna)[1],],canonical_mirna[(4*can_fifth+1):dim(canonical_mirna)[1],])\n  combinations=expand.grid(1:5,1:5)\n    for (i in 1:25){\n      check=testing_data$class\n      testing_data=testing_data[,-20]  \n      learning_data=learning_data[,-c(17,18)]\n      testing_data=testing_data[,-c(17,18)]  \n    }\n\n}\n\n\n\n\n\n# LOGISTIC REGRESSION\nmodel=glm(class~ ., data=learning_data,\n          family=binomial)\nmodel_pred_probs=predict(model, testing_data)\nmodel_results=rep(0,dim(testing_data)[1])\nmodel_results[model_pred_probs >0.5]=1\nLogReg_table=table(model_results,check)\nx=LogReg_table\nmean(model_results != check)\nLRSens=x[4]/(x[3]+x[4])\nLRSpec=x[1]/(x[1]+x[2])\n\n\n#RANDOM FOREST; default ntrees=500\n\n#rfm=randomForest(class~ hairpin_length+Harpin_FE+hairpin_A+hairpin_C+hairpin_G+hairpin_U+mature5p_length+mature3p_length+mature5p_A+\n    #               mature5p_C+mature5p_G+mature5p_U+mature3p_A+mature3p_G+mature3p_C+mature3p_U+overhangnumber, learning_data)\nrfm=randomForest(class~ ., learning_data)\nrfm_probs=predict(rfm,testing_data)\nrfm_results=rep(0,dim(testing_data)[1])\nrfm_results[rfm_probs >0.5]=1\nrfm_table=table(rfm_results,check)\nx=rfm_table\nrfmSens=x[4]/(x[3]+x[4])\nrfmSpec=x[1]/(x[1]+x[2])\n\n#LDA\nldam=lda(class~.,data=learning_data)\nldam_results=predict(ldam,testing_data)$class\n#ldam_results=rep(0,dim(testing_data)[1])\n#ldam_results[ldam_probs >0.5]=1\nldam_table=table(ldam_results,check)\nx=ldam_table\nldamSens=x[4]/(x[3]+x[4])\nldamSpec=x[1]/(x[1]+x[2])\n\n\nprint(LogReg_table)\nprint(paste(\"Logical Regression Sensitivity: \",LRSens))\nprint(paste(\"Logical Regression Specificity: \",LRSpec))\n\nprint(rfm_table)\nprint(paste(\"Random Forest Sensitivity: \",rfmSens))\nprint(paste(\"Random Forest Specificity: \",rfmSpec))\n\nprint(ldam_table)\nprint(paste(\"LDA Sensitivity: \",ldamSens))\nprint(paste(\"LDA Specificity: \",ldamSpec))\n",
    "created" : 1489054907187.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2616908445",
    "id" : "DEDD8C70",
    "lastKnownWriteTime" : 1489062629,
    "last_content_update" : 1489062629172,
    "path" : "~/Desktop/Mirtrony/LogReg.R",
    "project_path" : "LogReg.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}